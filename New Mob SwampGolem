
package net.mcreator.thedarkisland.entity;

import net.minecraftforge.registries.ForgeRegistries;
import net.minecraftforge.fml.network.NetworkHooks;
import net.minecraftforge.fml.network.FMLPlayMessages;
import net.minecraftforge.fml.javafmlmod.FMLJavaModLoadingContext;
import net.minecraftforge.fml.event.lifecycle.FMLCommonSetupEvent;
import net.minecraftforge.fml.client.registry.RenderingRegistry;
import net.minecraftforge.fml.DeferredWorkQueue;
import net.minecraftforge.eventbus.api.SubscribeEvent;
import net.minecraftforge.event.world.BiomeLoadingEvent;
import net.minecraftforge.common.MinecraftForge;
import net.minecraftforge.common.DungeonHooks;
import net.minecraftforge.client.event.ModelRegistryEvent;
import net.minecraftforge.api.distmarker.OnlyIn;
import net.minecraftforge.api.distmarker.Dist;

import net.minecraft.world.gen.Heightmap;
import net.minecraft.world.biome.MobSpawnInfo;
import net.minecraft.world.World;
import net.minecraft.util.math.BlockPos;
import net.minecraft.util.ResourceLocation;
import net.minecraft.util.DamageSource;
import net.minecraft.network.IPacket;
import net.minecraft.item.SpawnEggItem;
import net.minecraft.item.ItemGroup;
import net.minecraft.item.Item;
import net.minecraft.entity.player.ServerPlayerEntity;
import net.minecraft.entity.player.PlayerEntity;
import net.minecraft.entity.monster.MonsterEntity;
import net.minecraft.entity.ai.goal.SwimGoal;
import net.minecraft.entity.ai.goal.RandomWalkingGoal;
import net.minecraft.entity.ai.goal.NearestAttackableTargetGoal;
import net.minecraft.entity.ai.goal.MeleeAttackGoal;
import net.minecraft.entity.ai.goal.LookRandomlyGoal;
import net.minecraft.entity.ai.goal.HurtByTargetGoal;
import net.minecraft.entity.ai.attributes.GlobalEntityTypeAttributes;
import net.minecraft.entity.ai.attributes.Attributes;
import net.minecraft.entity.ai.attributes.AttributeModifierMap;
import net.minecraft.entity.MobEntity;
import net.minecraft.entity.EntityType;
import net.minecraft.entity.EntitySpawnPlacementRegistry;
import net.minecraft.entity.EntityClassification;
import net.minecraft.entity.Entity;
import net.minecraft.entity.CreatureAttribute;
import net.minecraft.client.renderer.model.ModelRenderer;
import net.minecraft.client.renderer.entity.model.EntityModel;
import net.minecraft.client.renderer.entity.MobRenderer;
import net.minecraft.block.BlockState;

import net.mcreator.thedarkisland.ThedarkislandModElements;

import com.mojang.blaze3d.vertex.IVertexBuilder;
import com.mojang.blaze3d.matrix.MatrixStack;

@ThedarkislandModElements.ModElement.Tag
public class SwampGolemEntity extends ThedarkislandModElements.ModElement {
	public static EntityType entity = null;
	public SwampGolemEntity(ThedarkislandModElements instance) {
		super(instance, 48);
		FMLJavaModLoadingContext.get().getModEventBus().register(new ModelRegisterHandler());
		MinecraftForge.EVENT_BUS.register(this);
	}

	@Override
	public void initElements() {
		entity = (EntityType.Builder.<CustomEntity>create(CustomEntity::new, EntityClassification.MONSTER).setShouldReceiveVelocityUpdates(true)
				.setTrackingRange(64).setUpdateInterval(3).setCustomClientFactory(CustomEntity::new).size(1.2000000000000002f, 2f))
						.build("swamp_golem").setRegistryName("swamp_golem");
		elements.entities.add(() -> entity);
		elements.items.add(() -> new SpawnEggItem(entity, -39322, -16751053, new Item.Properties().group(ItemGroup.MISC))
				.setRegistryName("swamp_golem_spawn_egg"));
	}

	@SubscribeEvent
	public void addFeatureToBiomes(BiomeLoadingEvent event) {
		boolean biomeCriteria = false;
		if (new ResourceLocation("swamp").equals(event.getName()))
			biomeCriteria = true;
		if (!biomeCriteria)
			return;
		event.getSpawns().getSpawner(EntityClassification.MONSTER).add(new MobSpawnInfo.Spawners(entity, 3, 1, 1));
	}

	@Override
	public void init(FMLCommonSetupEvent event) {
		DeferredWorkQueue.runLater(this::setupAttributes);
		EntitySpawnPlacementRegistry.register(entity, EntitySpawnPlacementRegistry.PlacementType.ON_GROUND, Heightmap.Type.MOTION_BLOCKING_NO_LEAVES,
				MonsterEntity::canMonsterSpawn);
		DungeonHooks.addDungeonMob(entity, 180);
	}
	private static class ModelRegisterHandler {
		@SubscribeEvent
		@OnlyIn(Dist.CLIENT)
		public void registerModels(ModelRegistryEvent event) {
			RenderingRegistry.registerEntityRenderingHandler(entity, renderManager -> {
				return new MobRenderer(renderManager, new Modelswampgolem(), 1.2000000000000002f) {
					@Override
					public ResourceLocation getEntityTexture(Entity entity) {
						return new ResourceLocation("thedarkisland:textures/swampgolem.png");
					}
				};
			});
		}
	}
	private void setupAttributes() {
		AttributeModifierMap.MutableAttribute ammma = MobEntity.func_233666_p_();
		ammma = ammma.createMutableAttribute(Attributes.MOVEMENT_SPEED, 0.3);
		ammma = ammma.createMutableAttribute(Attributes.MAX_HEALTH, 60);
		ammma = ammma.createMutableAttribute(Attributes.ARMOR, 0);
		ammma = ammma.createMutableAttribute(Attributes.ATTACK_DAMAGE, 5);
		GlobalEntityTypeAttributes.put(entity, ammma.create());
	}
	public static class CustomEntity extends MonsterEntity {
		public CustomEntity(FMLPlayMessages.SpawnEntity packet, World world) {
			this(entity, world);
		}

		public CustomEntity(EntityType<CustomEntity> type, World world) {
			super(type, world);
			experienceValue = 0;
			setNoAI(false);
		}

		@Override
		public IPacket<?> createSpawnPacket() {
			return NetworkHooks.getEntitySpawningPacket(this);
		}

		@Override
		protected void registerGoals() {
			super.registerGoals();
			this.goalSelector.addGoal(1, new MeleeAttackGoal(this, 1.2, false));
			this.goalSelector.addGoal(2, new RandomWalkingGoal(this, 1));
			this.targetSelector.addGoal(3, new HurtByTargetGoal(this));
			this.goalSelector.addGoal(4, new LookRandomlyGoal(this));
			this.goalSelector.addGoal(5, new SwimGoal(this));
			this.targetSelector.addGoal(6, new NearestAttackableTargetGoal(this, PlayerEntity.class, false, false));
			this.targetSelector.addGoal(7, new NearestAttackableTargetGoal(this, ServerPlayerEntity.class, false, false));
		}

		@Override
		public CreatureAttribute getCreatureAttribute() {
			return CreatureAttribute.UNDEFINED;
		}

		@Override
		public void playStepSound(BlockPos pos, BlockState blockIn) {
			this.playSound((net.minecraft.util.SoundEvent) ForgeRegistries.SOUND_EVENTS.getValue(new ResourceLocation("entity.iron_golem.step")),
					0.15f, 1);
		}

		@Override
		public net.minecraft.util.SoundEvent getHurtSound(DamageSource ds) {
			return (net.minecraft.util.SoundEvent) ForgeRegistries.SOUND_EVENTS.getValue(new ResourceLocation("entity.iron_golem.hurt"));
		}

		@Override
		public net.minecraft.util.SoundEvent getDeathSound() {
			return (net.minecraft.util.SoundEvent) ForgeRegistries.SOUND_EVENTS.getValue(new ResourceLocation("entity.iron_golem.death"));
		}
	}

	// Made with Blockbench 3.7.5
	// Exported for Minecraft version 1.15
	// Paste this class into your mod and generate all required imports
	public static class Modelswampgolem extends EntityModel<Entity> {
		private final ModelRenderer renka1;
		private final ModelRenderer noga2;
		private final ModelRenderer glowa;
		private final ModelRenderer body2;
		private final ModelRenderer body;
		private final ModelRenderer nogi;
		private final ModelRenderer renka2;
		private final ModelRenderer kolec5_r1;
		private final ModelRenderer kolec4_r1;
		private final ModelRenderer kolec3_r1;
		private final ModelRenderer kolec2_r1;
		private final ModelRenderer kolec_r1;
		private final ModelRenderer renkunia;
		public Modelswampgolem() {
			textureWidth = 64;
			textureHeight = 64;
			renka1 = new ModelRenderer(this);
			renka1.setRotationPoint(0.0F, 24.0F, 0.0F);
			noga2 = new ModelRenderer(this);
			noga2.setRotationPoint(-2.0F, 20.0F, 3.0F);
			setRotationAngle(noga2, -0.0436F, 0.0F, 0.0F);
			noga2.setTextureOffset(28, 11).addBox(-1.0F, -1.0F, -2.0F, 2.0F, 5.0F, 3.0F, 0.0F, false);
			glowa = new ModelRenderer(this);
			glowa.setRotationPoint(0.0F, 10.0F, 0.0F);
			glowa.setTextureOffset(16, 16).addBox(-2.0F, -2.0F, -2.0F, 4.0F, 5.0F, 4.0F, 0.0F, false);
			glowa.setTextureOffset(0, 0).addBox(-1.0F, 1.0F, -3.0F, 2.0F, 3.0F, 1.0F, 0.0F, false);
			body2 = new ModelRenderer(this);
			body2.setRotationPoint(0.0F, 24.0F, 0.0F);
			body2.setTextureOffset(0, 14).addBox(-3.0F, -7.0F, 1.0F, 6.0F, 2.0F, 4.0F, 0.0F, false);
			body = new ModelRenderer(this);
			body.setRotationPoint(0.0F, 0.0F, 0.0F);
			body2.addChild(body);
			body.setTextureOffset(0, 0).addBox(-4.0F, -14.0F, 0.0F, 8.0F, 7.0F, 7.0F, 0.0F, false);
			nogi = new ModelRenderer(this);
			nogi.setRotationPoint(2.0F, 19.0F, 2.0F);
			nogi.setTextureOffset(32, 3).addBox(-1.0F, 0.0F, -1.0F, 2.0F, 5.0F, 3.0F, 0.0F, false);
			renka2 = new ModelRenderer(this);
			renka2.setRotationPoint(4.0F, -7.0F, 1.0F);
			nogi.addChild(renka2);
			setRotationAngle(renka2, 0.0F, 0.0F, 0.0F);
			renka2.setTextureOffset(24, 25).addBox(-2.0F, 6.0F, -8.0F, 3.0F, 3.0F, 5.0F, 0.0F, false);
			renka2.setTextureOffset(0, 20).addBox(-2.0F, -1.0F, -2.0F, 3.0F, 10.0F, 3.0F, 0.0F, false);
			renka2.setTextureOffset(23, 0).addBox(-1.0F, 7.0F, -3.0F, 1.0F, 1.0F, 5.0F, 0.0F, false);
			kolec5_r1 = new ModelRenderer(this);
			kolec5_r1.setRotationPoint(-2.0F, 8.0F, -7.0F);
			renka2.addChild(kolec5_r1);
			setRotationAngle(kolec5_r1, 0.0F, 0.48F, -0.1309F);
			kolec5_r1.setTextureOffset(0, 4).addBox(-1.0F, -1.0F, 0.0F, 1.0F, 1.0F, 1.0F, 0.0F, false);
			kolec4_r1 = new ModelRenderer(this);
			kolec4_r1.setRotationPoint(-2.0F, 8.0F, -5.0F);
			renka2.addChild(kolec4_r1);
			setRotationAngle(kolec4_r1, 0.0F, 0.48F, -0.1309F);
			kolec4_r1.setTextureOffset(3, 5).addBox(-1.0F, -1.0F, 0.0F, 1.0F, 1.0F, 1.0F, 0.0F, false);
			kolec3_r1 = new ModelRenderer(this);
			kolec3_r1.setRotationPoint(1.0F, 8.0F, -5.0F);
			renka2.addChild(kolec3_r1);
			setRotationAngle(kolec3_r1, 0.0F, 0.48F, -0.1309F);
			kolec3_r1.setTextureOffset(0, 14).addBox(-1.0F, -1.0F, 0.0F, 1.0F, 1.0F, 1.0F, 0.0F, false);
			kolec2_r1 = new ModelRenderer(this);
			kolec2_r1.setRotationPoint(1.0F, 8.0F, -7.0F);
			renka2.addChild(kolec2_r1);
			setRotationAngle(kolec2_r1, 0.0F, 0.48F, -0.1309F);
			kolec2_r1.setTextureOffset(0, 16).addBox(-1.0F, -1.0F, 0.0F, 1.0F, 1.0F, 1.0F, 0.0F, false);
			kolec_r1 = new ModelRenderer(this);
			kolec_r1.setRotationPoint(0.0F, 8.0F, -9.0F);
			renka2.addChild(kolec_r1);
			setRotationAngle(kolec_r1, 0.0F, 0.48F, -0.1309F);
			kolec_r1.setTextureOffset(16, 16).addBox(-1.0F, -1.0F, 0.0F, 1.0F, 1.0F, 1.0F, 0.0F, false);
			renkunia = new ModelRenderer(this);
			renkunia.setRotationPoint(-11.0F, 0.1339F, -0.8255F);
			renka2.addChild(renkunia);
			renkunia.setTextureOffset(12, 25).addBox(-2.0F, -1.1339F, -1.1745F, 3.0F, 10.0F, 3.0F, 0.0F, false);
		}

		@Override
		public void setRotationAngles(Entity entity, float limbSwing, float limbSwingAmount, float ageInTicks, float netHeadYaw, float headPitch) {
			// previously the render function, render code was moved to a method below
		}

		@Override
		public void render(MatrixStack matrixStack, IVertexBuilder buffer, int packedLight, int packedOverlay, float red, float green, float blue,
				float alpha) {
			renka1.render(matrixStack, buffer, packedLight, packedOverlay);
			noga2.render(matrixStack, buffer, packedLight, packedOverlay);
			glowa.render(matrixStack, buffer, packedLight, packedOverlay);
			body2.render(matrixStack, buffer, packedLight, packedOverlay);
			nogi.render(matrixStack, buffer, packedLight, packedOverlay);
		}

		public void setRotationAngle(ModelRenderer modelRenderer, float x, float y, float z) {
			modelRenderer.rotateAngleX = x;
			modelRenderer.rotateAngleY = y;
			modelRenderer.rotateAngleZ = z;
		}
	}
}
